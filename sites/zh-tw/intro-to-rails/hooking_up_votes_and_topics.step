goals {

  div(style: 'margin: 0 auto; width: 250px; height: 120px;') do
    model_diagram header: 'Topics', fields: %w(id title description), style: "float: left;"
    div(style: 'float: left; position: relative; width: 60px; height: 100px;') do
      div(class: 'arrow-left', style: 'left: 0;  top: 30px;')
      div(class: 'horiz-line', style: 'left: 5px;  top: 37px; width: 25px;')
      div(class: 'vert-line', style: 'left: 30px; top: 38px; height: 25px;')
      div(class: 'horiz-line', style: 'right: 0; top: 62px; width: 30px;')
    end
    model_diagram header: 'Votes', fields: %w(id topic_id), style: "float: left;"
  end

  message "資料庫裡面有了關聯號碼，接下來我們要來告訴 Rails，topic 和投票記錄之間有明確的關係。"
}

steps {

  step "告訴 Topic model 有 Vote（投票記錄）的存在" do
    message "編輯 `app/models/topic.rb` 讓它長得像這樣："

    source_code :ruby, <<-RUBY
class Topic < ActiveRecord::Base
  has_many :votes, dependent: :destroy
end
    RUBY
  end

  step "告訴 Vote model 有 Topic 的存在" do
    message "編輯 `app/models/vote.rb` 讓它長得像這樣："
    source_code :ruby, <<-RUBY
class Vote < ActiveRecord::Base
  belongs_to :topic
end
    RUBY
  end

  step "進 Rails console 隨便玩玩看 Topic 和 Vote model" do
    message "首先，先確定你已經開了至少一篇 topic。"

    console_with_message "然後，從終端機視窗進入 Rails console：", "rails c"

    result <<-CONSOLE
      $ rails c
      Loading development environment (Rails 4.0.0)
      1.9.3-p194 :001 >
    CONSOLE

    message "在 console 裡面試試看這些指令："

    console_with_message "檢查總共有多少 topics：", "Topic.count"

    console_with_message "把第一篇 topic 存入變數", "my_topic = Topic.first"

    tip "`my_topic` 可以是任何的變數名稱，不過現在我們一律用 `my_topic`。"

    console_with_message "把那個 topic 的 title 改成別的：", "my_topic.update_attributes(title: 'Edited in the console')"

    console_with_message "新增一筆投票記錄給那個 topic：", "my_topic.votes.create"

    console_with_message "檢查 topic 總共有多少筆投票：", "my_topic.votes.count"

    console_with_message "刪除一筆那個 topic 的投票記錄：", "my_topic.votes.first.destroy"

    message "請注意，你在 **Model class**（例如 **Topic**、**Vote**）和 **Model instance**（例如此例的 my\\_topic）可以做的事是不一樣的。**my\\_topic.votes** 稱作 **association**，在這裡的行為比較像是 model class。"

    div do
      half_width "Model class / association 的 methods" do
        ul class: 'no-style-type' do
          li "Topic.first"
          li "Topic.last"
          li "Topic.all"
          li "Topic.count"
          li "Topic.find_by_id(5)"
          li "Topic.destroy_all"
          li "my_topic.votes.count"
          li "my_topic.votes.create"
          li "my_topic.votes.destroy_all"
        end
      end

      half_width "Model instance 的 methods" do
        ul class: 'no-style-type' do
          li "my_topic.title"
          li "my_topic.title = 'New title'"
          li "my_topic.update_attributes(title: 'New title')"
          li "my_topic.save"
          li "my_topic.save!"
          li "my_topic.destroy"
          li "my_topic.votes.first.destroy"
        end
      end
    end

    message <<-TEXT
      要看完整的列表的話，你可以上 <a href="http://guides.rubyonrails.org/active_record_querying.html">Active Record Query Interface RailsGuide</a>。
    TEXT
  end
}

explanation {

  message <<-MARKDOWN

`has_many` 和 `belongs_to`：

* 在 Rails 裡面，model 和 model 之間的關聯叫做 associations。
* Associations（通常）成對出現。
* 一篇 topic 會有許多（have many）投票記錄，所以要在 Topic model 裡面寫 `has_many :votes`。
  * 當你向一篇 topic 要它的投票記錄的時候，你會得到一個 Array，裡面有該 topic 的投票記錄。
  * [譯註]：事實上不是 Array，但是現在請先理解成 Array。
* 一筆投票記錄對應到一篇特定的 topic，所以要在 Vote model 裡面寫 `belongs_to :topic`。
  * 當你向一筆投票記錄要它的 topic 的時候，你會得到那筆投票記錄所屬的 topic。

此外，自己被刪除時候，刪掉所擁有的資料也很重要。在 `has_many :votes` 的 `dependent: :destroy`
意思是說，當一篇 **Topic** 被刪除（destroy）的時候，它的**投票記錄（votes）**也要一併刪除。沒有
`dependent :destroy` 的話，這些投票記錄會永遠留在資料庫裡面。
  MARKDOWN
}

next_step "allow_people_to_vote"
