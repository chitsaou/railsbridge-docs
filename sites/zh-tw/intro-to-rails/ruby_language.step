goals do
  goal "會使用 Ruby 基本的語法"
  goal "用 IRB 跑 Ruby 程式"
  goal "做簡單的算術"
  goal "使用、瞭解 Variable（變數）"
  goal "使用、瞭解 Array（陣列）"
  goal "使用 Loop（迴圈）和條件判斷"
end

steps do
  step do
    message "在終端機打這些字來啟動 IRB（Interactive Ruby Shell），這個程式可以讓你試一些 Ruby 程式碼："

    console_without_message "irb"

    message "長得像這樣（你看到的或許會有些不同）："

    console_without_message "1.9.3p362 :001 > "
  end

  step do
    console_with_message "接著試一些 Ruby 內建的簡單算術。在 IRB 裡面打字：", "3 + 3\n7 * 6"
  end

  step do
    message "**Variables（變數）** 指的是一個被指定 values（值）的名字。"

    console_without_message "my_variable = 5"

    message "這會把 `5` 這個值指定給 `my_variable` 這個名字。"
  end

  step do
    message "也可以對變數做算術："
    console_without_message <<-RUBY
my_variable + 2
my_variable * 3
    RUBY
  end

  step do
    message "變數可以放多個值，這叫 **Array（陣列）**。"

    console_without_message 'fruits = ["kiwi", "strawberry", "plum"]'

    message "這裡我們用了 `fruits` 這個變數來放一群水果名。"
  end

  step do
    console <<-RUBY
fruits = fruits + ["orange"]
fruits = fruits - ["kiwi"]
    RUBY

    message "`+` 和 `-` 叫做 Operators（運算符號）。跟數字一樣，我們也可以把它們用在 array 上。"

  end

  step do
    message "在 Ruby 裡面，萬物皆有 **class** （類別）。請在 IRB 裡面打字："

    console_without_message <<-RUBY
7.class
"kiwi".class
fruits.class
RUBY

    message "這些就是我們至今介紹的三個資料型態：**Fixnum**（數值）、**String**（文字）、**Array**（列表）。"
  end

  step do
    message "每個 class 都有不同的 **method** （方法）可以在該 class 的 **instance** （實例）使用"

    console_without_message <<-RUBY
fruits.length
fruits.first
    RUBY

    message "你可以看看一個 object 所擁有的所有 method："
    console_without_message <<-RUBY
fruits.methods
    RUBY

    message "還可以**串**在一起："
    console_without_message <<-RUBY
fruits.methods.sort
    RUBY
  end

  step do
    message "Array 有個 method 叫做 **each**，會遍歷它裡面每一個項目並執行程式。"
    console_without_message <<-RUBY
fruits.each do |fruit|
  puts fruit
end
    RUBY
    message "這會把 `fruits` array 裡面的第一項（`\"strawberry\"`）拿出來，把它設給 `fruit` 變數，並執行 `do` 和 `end` 之間的程式。然後對其他項重覆做這件事。上面這段程式會印出水果的列表。"
  end

  step do
    message "**conditional（條件式）** 只會在條件滿足的時候才執行程式。"

    console_without_message <<-RUBY
if my_variable > 1
  puts "YAY!"
end
    RUBY

    message "如果 `my_variable` 變數裡面儲存的值大於 1，才會印出 `YAY!`。"

    message "請試著把 `>` 改成 `<`。"
  end

  step do
    message "你也可以做自己的 method："
    console_without_message <<-RUBY
def pluralize(word)
  word + "s"
end
pluralize("kiwi")
    RUBY

    message "Method 會取 **parameters（參數）**，表示它們要對哪些變數操作。以此例而言，我們做了一個 method 叫做 pluralize ，它取一個參數 word，是一個單字。"

    message "Method 也可以 return（回傳）資料。以此例而言，pluralize 會回傳 word 單字加上 's' 結尾。在 Ruby 裡面，function 會回傳最後一行的結果，無論該結果是什麼。"
  end
end

next_step "getting_started"
