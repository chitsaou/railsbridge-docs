h2 do
  span "如果你從來沒有把程式 deploy 到 Heroku 過，請看"
  a '第一次 deploy 的方法', href: '#first-time'
  span ". Otherwise, start at "
  a 'deploy 新版程式的方法', href: '#every-time'
  span "."
end

a name: 'first-time'
situation "第一次 deploy 的方法" do
  step "開新 Heroku 應用程式" do
    console "heroku create"
    message "`heroku create` 會在 Heroku 的系統裡面註冊新的應用程式。跑完之後你應該會看到輸出裡面告訴你新的應用程式的 URL。"
  end

  step "修改 Gemfile" do
    important "每個 Rails 程式都有他自己的 `Gemfile`。請確定你開的是你的 Rails 程式的 Gemfile。"

    message "Heroku 執行我們程式的方法跟我們在本地開發環境執行的方法有點不同，所以我們要改一下 `Gemfile`。"

    message "在編輯器打開 `Gemfile`，找這一行："

    source_code :ruby, <<-RUBY
gem 'sqlite3'
    RUBY

    message "**刪除那一行**，改成這樣："

    source_code :ruby, <<-RUBY
group :development, :test do
  gem 'sqlite3'
end

group :production do
  gem 'pg'
  gem 'rails_12factor'
end
    RUBY
  end

  step "套用 Gemfile 的異動" do
    console "bundle install --without production"
    message "每當你改 Gemfile 的時候，你都要跑一次 ``bundle install``，這樣子異動才會被套用。套用之後的異動會被存在另一個檔案 ``Gemfile.lock``。"
  end

  step "把 Gemfile 的異動 commit 進 git" do
    message "現在 Gemfile 和 Gemfile.lock 修改過了，在上傳到 Heroku 之前，我們要把這些異動 commit 進 git。"
    console <<-SHELL
git add .
git commit -m "改 Gemfile 來適應 heroku"
    SHELL
    tip "第一行指令的最後面有一個小數點符號。"
  end
end

a name: 'every-time'
situation "deploy 新版程式的方法" do
  step "把所有異動都 commit 進 git" do
    message "Heroku 只受理我們有 commit 進本地 git repo 的程式，所以要確定修改過的檔案都有 commit 進去了。"
    console "git status"
    message "`git status` 顯示你還沒 commit 進 git 的異動。如果沒有輸出任何東西的話，那你可以 deploy 了！不然的話就要 commit 程式碼進去："

    console <<-SHELL
git add .
git commit -m "Some helpful message for your future self"
    SHELL
    message "Commit message 應該要可以描述你這次修改了什麼東西，像是：「把投票數加到 topics 列表頁」"
  end

  step "把異動 push（上傳）到 Heroku" do
    console "git push heroku master"
    message "這樣子會把本地所有已經 commit 進去的異動都 push 到 Heroku。"
  end

  step "在 Heroku 跑資料庫的 migration" do
    console "heroku run rake db:migrate"
    message "這是叫 Heroku 在它的資料庫跑 migration，作用就像我們在本地跑 rake db:migrate。Heroku 的資料庫跟你電腦上的資料庫是分開的，也就是說每一次你更改了資料庫的結構，你都要在 Heroku 的資料庫更新一次。這也就是說在 Heroku 上面你不會看到你電腦上的 sqlite3 資料庫裡面的資料。"
  end

  step "上網看你的程式" do
    console "heroku open"
    message "會在瀏覽器打開你上傳到 Heroku 的程式。"
  end
end

explanation do
  message <<-MARKDOWN
  首先，我們要讓 Heroku 跟我們的程式可以整合。這需要修改 Gemfile 和重跑 bundler。

  * Gemfile 這個檔案列出了所有你的 Rails 程式所需要的 Ruby 程式庫（Library），稱為**「gem」**。
    我們這裡宣告的是說，要在自己電腦的開發環境使用 `sqlite3` gem（寫在 development group 裡面），
    但是在上傳到 Heroku（production group）的時候要使用 `pg` gem，這是專門設計給 Heroku 使用的資料庫。

  * Bundler 是 Ruby 專案用來追蹤有使用哪些 gem 的工具。我們透過 `Gemfile` 跟 Bundler
    說我們要什麼 gem，然後我們要確定這些 gem 都有安裝。因為我們目前電腦裡面沒有 Heroku 用的資料庫系統，
    所以我們跳過不安裝 production 用的 gem。別擔心，Bundler 還是會幫我們記得，讓 Heroku 幫你安裝。
  MARKDOWN

  message "你可以在任何你的程式沒問題、會動的時候 deploy。標準流程長得像這樣："
  img src: "img/workflow.png", alt: "workflow", style: "border: none"
  ol do
    li { message "改程式" }
    li { message "把異動 commit 進 git（`git commit`）" }
    li { message "（重複）" }
  end
  message "每當你把異動 commit 進 git 之後，你都可以執行 `git push heroku master`，然後新版本就上線了！"
end








